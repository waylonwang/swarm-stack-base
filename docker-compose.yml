# Update Time: 2024-01-12 15:00
version: "3.4"

services:
  # Portainer nodes代理
  agent:
    image: portainer/agent:2.16.2
    networks: [network_cluster]
    restart: always
    environment:
      AGENT_CLUSTER_ADDR: tasks.agent
      TZ: Asia/Shanghai
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux

  # Portainer Swarm管理
  portainer:
    image: portainer/portainer-ce:2.16.2-alpine
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    networks: [network_cluster]
    restart: always
    ports:
      - target: 9000
        published: 9000
        protocol: tcp
        mode: host
    volumes:
      - nfs_portainer:/data
    # 容器内的全部环境变量，用于Portainer Stack Deploy构建services时对compose文件的解析
    # 具体Stack的docker-compose.yml文件中的环境变量，都可以直接使用这个文件中定义的用于Portainer容器的环境变量
    # 例如: 所有docker-compose.yml中的TZ都可以直接定义为 TZ: ${TZ}
    env_file: [../../stack.env]
    deploy:
      labels:
        # 对外暴露容器服务
        - "traefik.enable=true"
        # 对外访问的路由地址，路由规则请参考官网
        # https://docs.traefik.io/routing/routers/
        # 对外暴露的入口点
        - "traefik.http.routers.portainer.rule=Host(`swarm.${DOMAIN_SWARM}`)"
        - "traefik.http.routers.portainer.entrypoints=websecure"
        - "traefik.http.routers.portainer.service=portainer"
        - "traefik.http.routers.portainer.middlewares=cors-headers@file,noauth-chain@file"
        # 容器内的入口点，treafik无法获知你的服务的访问入口点
        # 所以你必须以此告诉Traefik
        # Traefik同时会在此对横向拓展的容器建立负载均衡
        # 更多见https://docs.traefik.io/routing/services/
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"
        - homepage.group=Base & Public
        - homepage.name=Portainer
        - homepage.icon=portainer.png
        - homepage.href=https://swarm.${DOMAIN_SWARM}:4/
        - homepage.description=Swarm服务管理
        - homepage.siteMonitor=http://portainer:9000
        - homepage.showStats=true
        - homepage.widget.type=portainer
        - homepage.widget.url=https://swarm.${DOMAIN_SWARM}:4
        - homepage.widget.env=1
        - homepage.widget.key=${HOMEPAGE_PORTAINER_TOKEN}
      mode: replicated
      replicas: 1
      placement:
        # 注意：
        # 由于Synology修改了Docker的代码，导致Swarm模式下，环境变量无法正确的赋值
        # 因此Portainer不能部署到Synology NAS服务器，否则上述env_file引入的环境变量全部无效
        # 同时要注意，Swarm模式下，需要环境变量运行的Service都不应部署到Synology NAS服务器
        constraints:
          - node.role == manager
          - node.labels.base == true

networks:
  # Swarm集群overload网络
  network_cluster:
    external: true

x-common-keys-volume: &common-keys-volume
  type: nfs
  o: addr=${NFS_SERVER},rw,nfsvers=4

volumes:
  # 挂载NFS卷，用于Swarm集群node迁移时保持数据
  nfs_portainer:
    driver: local
    driver_opts:
      <<: *common-keys-volume
      device: :${NFS_DEVICE}/base/portainer
